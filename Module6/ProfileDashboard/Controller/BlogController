package com.app.blog.controller;

import java.security.Principal;
import java.util.List;

import org.hibernate.boot.jaxb.mapping.marshall.LockModeTypeMarshalling;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.app.blog.dto.BlogResponseDTO;
import com.app.blog.dto.CommentDeleteReqDto;
import com.app.blog.dto.CommentDto;
import com.app.blog.dto.profileDto;
import com.app.blog.model.Blog;
import com.app.blog.model.Comment;
import com.app.blog.service.BlogService;

@RestController
@RequestMapping("/api/blogs")
public class BlogController {

	@Autowired
	BlogService blogService;
	
	@GetMapping
	public ResponseEntity<List<BlogResponseDTO>> getAllBlogs(){
		return blogService.getBlogs();
	}
	
	@GetMapping("/myblogs")
	private ResponseEntity<List<BlogResponseDTO>> getBlog(Principal principal){
		String email=principal.getName();
		return blogService.getBlogsCreatedByUser(email);
	}
	
	@PostMapping("/create")
	private ResponseEntity<?> createBlog(@RequestBody Blog blog,Principal principal){
		String email=principal.getName();
		return blogService.createBlog(blog,email);
	}
	
	@DeleteMapping("/delete/{id}")
	private ResponseEntity<?> deleteBlog(@PathVariable long id,Principal principal){
		return blogService.deleteBlog(id,principal.getName());
	}
	
	@PutMapping("/edit/{id}")
	private ResponseEntity<?> editBlog(@PathVariable long id,@RequestBody Blog blog,Principal principal){
		return blogService.editBlog(id,blog,principal.getName());
	}
	
	@GetMapping("/likes/{id}")
	private ResponseEntity<BlogResponseDTO> getLikes(@PathVariable long id,Principal principal){
		return blogService.countLikes(id,principal.getName());
	}
	
	@GetMapping("/likedBlogs")
	private ResponseEntity<?> getAllLikedBlogs(Principal principal){
		return blogService.getLikedBlogIds(principal.getName());
	}
	
	@GetMapping("/profile")
	private ResponseEntity<profileDto> fetchProfile(Principal principal){
		return blogService.getProfile(principal.getName());
	}

	@PostMapping("/comments/{blogid}")
	private ResponseEntity<?> postComment(Principal principal,@RequestBody Comment comment,@PathVariable Long blogid){
		return blogService.postComment(principal.getName(),comment,blogid);
	}
	
	@GetMapping("/comments/{blogid}")
	private ResponseEntity<List<CommentDto>> getComments(@PathVariable Long blogid){
		return blogService.getComments(blogid);
	}
	
	@DeleteMapping("/comments/delete")
	private ResponseEntity<?> deleteComment(Principal principal,@RequestBody CommentDeleteReqDto req){
		return blogService.deleteComment(principal.getName(),req.getBlogId(),req.getCommentId());
		
		
	}

}
